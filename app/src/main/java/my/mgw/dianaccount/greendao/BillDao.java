package my.mgw.dianaccount.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import my.mgw.dianaccount.model.Bill;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL".
*/
public class BillDao extends AbstractDao<Bill, Long> {

    public static final String TABLENAME = "BILL";

    /**
     * Properties of entity Bill.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Category = new Property(1, String.class, "category", false, "CATEGORY");
        public final static Property Pay = new Property(2, boolean.class, "pay", false, "PAY");
        public final static Property Money = new Property(3, double.class, "money", false, "MONEY");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property Text = new Property(5, String.class, "text", false, "TEXT");
    }


    public BillDao(DaoConfig config) {
        super(config);
    }
    
    public BillDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CATEGORY\" TEXT," + // 1: category
                "\"PAY\" INTEGER NOT NULL ," + // 2: pay
                "\"MONEY\" REAL NOT NULL ," + // 3: money
                "\"DATE\" TEXT," + // 4: date
                "\"TEXT\" TEXT);"); // 5: text
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Bill entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(2, category);
        }
        stmt.bindLong(3, entity.getPay() ? 1L: 0L);
        stmt.bindDouble(4, entity.getMoney());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(6, text);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Bill entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(2, category);
        }
        stmt.bindLong(3, entity.getPay() ? 1L: 0L);
        stmt.bindDouble(4, entity.getMoney());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(6, text);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Bill readEntity(Cursor cursor, int offset) {
        Bill entity = new Bill( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // category
            cursor.getShort(offset + 2) != 0, // pay
            cursor.getDouble(offset + 3), // money
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // text
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Bill entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategory(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPay(cursor.getShort(offset + 2) != 0);
        entity.setMoney(cursor.getDouble(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setText(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Bill entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Bill entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Bill entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
